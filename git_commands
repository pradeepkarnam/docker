### **Basic Git Commands** and Key Concepts

To get started with Git, it's essential to understand the basic commands and how to set up SSH and a remote repository for seamless workflow.

---

### **1. Configuring Git**

#### **1.1 Setup Global Username and Email**
Before using Git, configure your username and email (which will be associated with your commits).

```bash
git config --global user.name "Your Name"
git config --global user.email "your-email@example.com"
```

You can check your configuration with:

```bash
git config --list
```

#### **1.2 Initialize a Repository**

To create a new Git repository in a directory:

```bash
git init
```

This will create a `.git` folder inside the directory to start tracking changes.

---

### **2. Basic Git Workflow Commands**

#### **2.1 Check the Status**

To check the current status of the repository (which files have been changed, staged, etc.):

```bash
git status
```

#### **2.2 Add Files**

To track and stage new or modified files for commit:

```bash
git add <file-name>
```

To stage all modified files:

```bash
git add .
```

#### **2.3 Commit Changes**

Once the changes are staged, commit them with a message describing what the changes are:

```bash
git commit -m "Your descriptive message"
```

#### **2.4 Check the Commit History**

To view the history of commits:

```bash
git log
```

#### **2.5 Branching**

- **Create a New Branch**:

  ```bash
  git branch <branch-name>
  ```

- **Switch to a Branch**:

  ```bash
  git checkout <branch-name>
  ```

- **Create and Switch to a New Branch in One Command**:

  ```bash
  git checkout -b <branch-name>
  ```

- **Merge a Branch into Another Branch**:

  First, switch to the branch you want to merge into, usually `main`:

  ```bash
  git checkout main
  ```

  Then merge the other branch:

  ```bash
  git merge <branch-name>
  ```

---

### **3. Remote Repositories**

#### **3.1 Adding a Remote Repository**

Once your project is on GitHub, you'll want to push your local repository to a remote repository on GitHub.

- Add a remote repository:

  ```bash
  git remote add origin <remote-repository-URL>
  ```

You can check all remote repositories configured by using:

```bash
git remote -v
```

#### **3.2 Push Changes to Remote Repository**

To push your committed changes to the remote repository on GitHub:

```bash
git push origin <branch-name>
```

- To push the main branch:

  ```bash
  git push origin main
  ```

#### **3.3 Pull Changes from Remote Repository**

To pull the latest changes from the remote repository to your local repository:

```bash
git pull origin <branch-name>
```

This fetches the changes and integrates them into your current branch.

---

### **4. SSH Configuration for GitHub**

Using **SSH** allows you to push and pull changes securely without entering your credentials every time.

#### **4.1 Generate SSH Key**

1. Open your terminal and run:

   ```bash
   ssh-keygen -t ed25519 -C "your-email@example.com"
   ```

2. Press `Enter` to accept the default file location.

3. It will ask for a passphrase. You can leave it empty or set one (recommended).

4. Your SSH keys will be generated, typically located in `~/.ssh/id_ed25519` and `~/.ssh/id_ed25519.pub`.

#### **4.2 Add SSH Key to GitHub**

1. Copy your public SSH key:

   ```bash
   cat ~/.ssh/id_ed25519.pub
   ```

2. Log in to **GitHub** and go to **Settings > SSH and GPG keys**.

3. Click **New SSH Key**, give it a title, and paste your public key in the "Key" field.

4. Click **Add SSH Key**.

#### **4.3 Configure Git to Use SSH**

Make sure your remote repository uses SSH instead of HTTPS:

```bash
git remote set-url origin git@github.com:username/repository-name.git
```

Now you can push and pull without needing to enter your username and password.

---

### **5. Working with Git Branches**

#### **5.1 Create a Branch**

```bash
git branch <branch-name>
```

#### **5.2 Switch to a Branch**

```bash
git checkout <branch-name>
```

#### **5.3 List All Branches**

```bash
git branch
```

#### **5.4 Delete a Branch**

After merging, you can delete a branch locally:

```bash
git branch -d <branch-name>
```

Forcing deletion (if not merged yet):

```bash
git branch -D <branch-name>
```

#### **5.5 Push a Branch to Remote**

To push your branch to GitHub:

```bash
git push origin <branch-name>
```

---

### **6. Forking and Pull Requests on GitHub**

#### **6.1 Fork a Repository**

Forking is copying someone else's repository to your GitHub account:

- On GitHub, click the **Fork** button on the repository you want to fork.

#### **6.2 Make Changes and Push**

After forking, clone the repository, make changes locally, and push the changes to your own repository.

#### **6.3 Create a Pull Request**

To contribute changes back to the original repository, create a pull request:

1. Go to your forked repository.
2. Click **New Pull Request**.
3. Compare your changes and submit the pull request to the original repository.

---

### **7. Additional Concepts**

#### **7.1 Git Ignore**

You can exclude certain files from being tracked by Git using a `.gitignore` file.

1. Create a `.gitignore` file in your project.
2. Add patterns for files to exclude:

   ```text
   # Ignore all .log files
   *.log
   # Ignore node_modules directory
   node_modules/
   ```

#### **7.2 Stashing**

Stash allows you to save your changes temporarily without committing them:

- Save changes to the stash:

  ```bash
  git stash
  ```

- Reapply stashed changes:

  ```bash
  git stash apply
  ```

- View stashed changes:

  ```bash
  git stash list
  ```

---

### **8. Summary of Important Git Commands**

| Command                       | Description                                                |
| ----------------------------- | ---------------------------------------------------------- |
| `git init`                    | Initialize a new Git repository                             |
| `git clone <repo-url>`        | Clone a repository to your local machine                    |
| `git status`                  | Check the status of your working directory                  |
| `git add <file>`              | Stage a file for the next commit                            |
| `git commit -m "message"`     | Commit staged changes with a descriptive message            |
| `git log`                     | View commit history                                         |
| `git branch`                  | List branches                                               |
| `git branch <branch-name>`    | Create a new branch                                         |
| `git checkout <branch-name>`  | Switch to a branch                                          |
| `git merge <branch-name>`     | Merge a branch into the current branch                      |
| `git remote add origin <url>` | Add a remote repository                                     |
| `git push origin <branch>`    | Push commits to the remote repository                       |
| `git pull origin <branch>`    | Pull updates from a remote repository to your local branch  |

---

By mastering these commands and concepts, you'll be well-equipped to use Git and GitHub effectively for version control, collaboration, and software development.
